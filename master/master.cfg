# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from .custom import GithubCreateEventHandler, get_changes_file

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [ 
    buildslave.BuildSlave('worker-amd64', '$password'),
    buildslave.BuildSlave('worker-armhf', '$password'),
    ]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
    schedulers.ForceScheduler(
        name='force',
        builderNames=[
            'build-amd64-pkg',
            'build-armhf-pkg',
            ]),
    schedulers.AnyBranchScheduler(
        name='tags',
        categories=['new-tag'],
        builderNames=[
            'build-amd64-pkg',
            'build-armhf-pkg',
            ]),
    ]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

amd64_pkg_factory = util.BuildFactory()
amd64_pkg_factory.addStep(steps.Git(
    repourl='https://github.com/ideascube/ideascube.git',
    mode='incremental', branch='master'))
amd64_pkg_factory.addStep(steps.ShellCommand(
    command=['sudo', 'sbuild-update', '-udcar', 'jessie-amd64-sbuild']))
amd64_pkg_factory.addStep(steps.SetPropertyFromCommand(
    extract_fn=get_changes_file('amd64'), timeout=2400,
    command=[
        'sbuild', '-s', '--dist=jessie', '--arch=amd64', '--build-dep-resolver=aptitude',
        '--extra-repository="deb http://ftp.fr.debian.org/debian jessie-backports main"',
        ]))
amd64_pkg_factory.addStep(steps.ShellCommand(
    command=['dput', 'local', util.Interpolate('%(prop:workdir)s/%(prop:changes_file)s')]))

armhf_pkg_factory = util.BuildFactory()
armhf_pkg_factory.addStep(steps.Git(
    repourl='https://github.com/ideascube/ideascube.git',
    mode='incremental', branch='master'))
armhf_pkg_factory.addStep(steps.ShellCommand(
    command=['sudo', 'sbuild-update', '-udcar', 'jessie-armhf-sbuild']))
armhf_pkg_factory.addStep(steps.SetPropertyFromCommand(
    extract_fn=get_changes_file('armhf'), timeout=2400,
    command=[
        'sbuild', '-s', '--dist=jessie', '--arch=armhf', '--build-dep-resolver=aptitude',
        '--extra-repository="deb http://ftp.fr.debian.org/debian jessie-backports main"',
        ]))
armhf_pkg_factory.addStep(steps.ShellCommand(
    command=['dput', 'remote', util.Interpolate('%(prop:workdir)s/%(prop:changes_file)s')]))

c['builders'] = [
    util.BuilderConfig(
        name='build-amd64-pkg', slavenames=['worker-amd64'],
        factory=amd64_pkg_factory),
    util.BuilderConfig(
        name='build-armhf-pkg', slavenames=['worker-armhf'],
        factory=armhf_pkg_factory),
    ]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html, web

authz_cfg = web.authz.Authz(
    auth=web.auth.BasicAuth([('$admin_login', '$admin_password')]), forceBuild='auth',
    forceAllBuilds='auth', gracefulShutdown=False, pingBuilder=False,
    stopBuild=True, stopAllBuilds=False, cancelPendingBuild=False)

c['status'] = [
    html.WebStatus(
        http_port=8010, authz=authz_cfg,
        change_hook_dialects={
            'github': {
                'class': GithubCreateEventHandler,
                'secret': '$secret',
                'strict': True,
                },
            },
        ),
    ]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'Ideascube'
c['titleURL'] = 'https://github.com/ideascube'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://buildbot.ideascube.org/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
